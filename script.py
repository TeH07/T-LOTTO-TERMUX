import time
import uiautomator2 as u2
from datetime import datetime, timedelta
import ntplib
import threading
import subprocess

# === ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ===
DEVICE_ID = "192.168.1.10:5555"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô IP ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
PIN_CODE = "899999"
TARGET_APP = "com.teh.testapp"
#TARGET_APP = "com.ktb.customer.qr"
BUY_TIME = "15:00:00"
BTN_L6 = "‡∏™‡∏•‡∏≤‡∏Å‡∏´‡∏Å‡∏´‡∏•‡∏±‡∏Å"
BTN_BUY = "‡∏ã‡∏∑‡πâ‡∏≠-‡∏à‡∏≠‡∏á ‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤"
BTN_CLOSE = "‡∏õ‡∏¥‡∏î"
BTN_OK1 = "‡∏õ‡∏∏‡πà‡∏° ‡∏ï‡∏Å‡∏•‡∏á"
BTN_OK2 = "‡∏ï‡∏Å‡∏•‡∏á"
PIN_TEXT_TRIGGER = "‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™ PIN 6 ‡∏´‡∏•‡∏±‡∏Å"
PIN_DELETE_TEXT = "‡∏ï‡∏Å‡∏•‡∏á"
COMPLETED_TEXT = "‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏•‡∏≤‡∏Å ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
COMPLETED_BUY_TEXT = "‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏•‡∏≤‡∏Å ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
DELAY_PIN = 0.03
SWIPE_HEIGHT = 2060  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏±‡∏î
SWIPE_WIDTH_RATIO = 0.1
TIME_OFFSET = 0.9

running = False
width = 0
height = 0
diff_ms = 0
clicked = False
buy_clicked = False

def init_ntp_sync():
    global diff_ms
    start_time = time.time()
    attempts = 0
    
    while time.time() - start_time < 3:  # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ô‡∏≤‡∏ô 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        try:
            attempts += 1
            client = ntplib.NTPClient()
            response = client.request('time.google.com', version=3, timeout=0.5)
            ntp_time = datetime.fromtimestamp(response.tx_time)
            local_time = datetime.now()
            diff_ms = (ntp_time - local_time).total_seconds() * 1000
            return True
        except Exception as e:
            print(f"‚ùå ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {attempts} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {str(e)[:50]}...")
            time.sleep(0.1)  # ‡∏£‡∏≠ 0.1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
    
    print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ NTP ‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏ó‡∏ô")
    diff_ms = 0
    return False

def get_adjusted_time():
    """‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á + diff_ms)"""
    return datetime.now() + timedelta(milliseconds=diff_ms)

def wait_until():
    global running, buy_time

    now = get_adjusted_time()
    if now.time() < datetime.strptime("12:00:00", "%H:%M:%S").time():
        BUY_TIME = "07:30:00"
    else:
        BUY_TIME = "15:00:00"

    buy_time_set = datetime.strptime(BUY_TIME, "%H:%M:%S").time()
    now = get_adjusted_time()
    buy_datetime = datetime.combine(now.date(), buy_time_set)
    adjustment_seconds = 1.15 - TIME_OFFSET
    buy_time = buy_datetime - timedelta(seconds=adjustment_seconds)
    open_app_time = buy_time - timedelta(minutes=3)
    today = get_adjusted_time().date()
    open_app_dt = datetime.combine(today, open_app_time.time())

    running = False
    while not running:
        current_time = get_adjusted_time()
        if current_time >= open_app_dt:
            running = True
            return True

        time_left = (open_app_dt - current_time).total_seconds()

        # Calculate hours, minutes, seconds
        hours, remainder = divmod(time_left, 3600)
        minutes, seconds = divmod(remainder, 60)

        # First print format
        print(f"‚è≥ ‡∏£‡∏≠‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏û... ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å {time_left:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")

        # Second message format
        message = (
            f"‚è≥ ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏û...\n"
            f"‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å {int(hours)} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á {int(minutes)} ‡∏ô‡∏≤‡∏ó‡∏µ {int(seconds)} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"
        )

        print(message)
        send_running(message)

        time.sleep(0.5)

    return True


def verify_adb_enabled(d):
    try:
        adb_enabled = d.shell('settings get global adb_enabled').output.strip()
        adb_wifi_enabled = d.shell('settings get global adb_wifi_enabled').output.strip()
        return adb_enabled == '2' and adb_wifi_enabled == '2'
    except Exception as e:
        print(f"‚ùå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ADB ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        send_error(f"‚ùå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ADB ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        return False

def do_hook(d):
    try:
        d.shell('settings put global adb_enabled 2')
        d.shell('settings put global adb_wifi_enabled 2')
        if verify_adb_enabled(d):
            print("üîó Hook ADB ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        else:
            print("‚ùå Hook ADB ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    except Exception as e:
        print(f"‚ùå Hook Error: {e}")

def send_success():
    subprocess.run([
        'am', 'broadcast',
        '-a', 'com.teh.tlotto_cm.ACTION_SCRIPT_UPDATE',
        '--es', 'status', 'success',
        '-n', 'com.teh.tlotto_cm/.ScriptUpdateReceiver'
    ])
def send_script_loaded():
    subprocess.run([
        'am', 'broadcast',
        '-a', 'com.teh.tlotto_cm.ACTION_SCRIPT_UPDATE',
        '--es', 'status', 'loaded',
        '-n', 'com.teh.tlotto_cm/.ScriptUpdateReceiver'
    ])
def send_running(msg):
    subprocess.run([
        'am', 'broadcast',
        '-a', 'com.teh.tlotto_cm.ACTION_SCRIPT_UPDATE',
        '--es', 'message', msg,
        '-n', 'com.teh.tlotto_cm/.ScriptUpdateReceiver'
    ])

def send_error(msg):
    subprocess.run([
        'am', 'broadcast',
        '-a', 'com.teh.tlotto_cm.ACTION_SCRIPT_UPDATE',
        '--es', 'status', msg,
        '-n', 'com.teh.tlotto_cm/.ScriptUpdateReceiver'
    ])

def complete(d):
    global running
    while running:
        if d(text=COMPLETED_TEXT).exists or d(text=COMPLETED_BUY_TEXT).exists:
            print("‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            send_success()  # ‡∏™‡πà‡∏á‡πÅ‡∏Ñ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ success
            running = False
            return
        time.sleep(0.2)

def click_ok(d):
    global buy_clicked
    while running:
        if d(text=BTN_OK1).exists:
            d(text=BTN_OK1).click()
            buy_clicked = False
            return buy_clicked
        elif d(text=BTN_OK2).exists:
            d(text=BTN_OK2).click()
            buy_clicked = False
            return buy_clicked
        time.sleep(0.1)

def click_L6(d):
    global clicked

    while running and not clicked:
        if d(text=BTN_L6).exists:
            d(text=BTN_L6).click()
            time.sleep(2)
            found = False
            while found:
                if d(text=BTN_BUY).exists:
                    clicked = True
                    found = True
                    print("üü¶ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° L6 ‡πÅ‡∏•‡πâ‡∏ß")
                else:
                    d.swipe(20, 500, 20, 2000, 0.1)
            time.sleep(3)
            break
        time.sleep(1)

def click_close(d):
    while running:
        if d(text=BTN_CLOSE).exists:
            d(text=BTN_CLOSE).click()
        time.sleep(0.1)


def click_buy_and_pin(d, buy_time, width, height):
    try:
        pin_coordinates = {}
        global buy_clicked
        pin_clicked = False
        on_swipe = False
        last_print_time = get_adjusted_time()

        def enter_pin():
            nonlocal pin_coordinates, pin_clicked
            if not PIN_CODE or len(PIN_CODE) != 6:
                return False

            # ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏∏‡πà‡∏° PIN ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô pin_coordinates
            for digit in PIN_CODE:
                if digit not in pin_coordinates:
                    if d(text=digit).exists:
                        pin_coordinates[digit] = d(text=digit).info['bounds']
                    else:
                        return False

            # ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° PIN ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
            for digit in PIN_CODE:
                bounds = pin_coordinates[digit]
                d.click(
                    bounds['left'] + (bounds['right'] - bounds['left']) / 2,
                    bounds['top'] + (bounds['bottom'] - bounds['top']) / 2
                )
                #time.sleep(DELAY_PIN)

            print("üîê ‡πÉ‡∏™‡πà PIN ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
            pin_coordinates = {}
            time.sleep(3)

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏ö PIN ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà
            if d(text=PIN_DELETE_TEXT).exists:
                print("‚ö†Ô∏è ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö PIN")
                for i in range(5):
                    if d(text=PIN_DELETE_TEXT).exists:
                        d(text=PIN_DELETE_TEXT).click()
                        print(f"‡∏•‡∏ö PIN ‡∏Ñ‡∏•‡∏¥‡∏Å ({i+1})")
                        time.sleep(0.1)
                    else:
                        break
            return True

        while not (buy_clicked and pin_clicked):
            try:
                # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ click_ok ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏∏‡πà‡∏° OK
                if d(text=BTN_OK1).exists or d(text=BTN_OK2).exists:
                    click_ok(d)  # ‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ False ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï buy_clicked ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° OK

                # ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏ã‡∏∑‡πâ‡∏≠
                if not buy_clicked and d(text=BTN_BUY).exists:
                    btn_bounds = d(text=BTN_BUY).info.get('bounds', None)
                    btn_prepared = False

                    if btn_bounds and not on_swipe:
                        center_x = (btn_bounds['left'] + btn_bounds['right']) // 2
                        center_y = (btn_bounds['top'] + btn_bounds['bottom']) // 2
                        print(f"üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ã‡∏∑‡πâ‡∏≠: {center_x}, {center_y}")

                        if buy_time > get_adjusted_time():
                            while True:
                                now = get_adjusted_time()
                                diff = (buy_time - now).total_seconds()
                                print(f"‚è≥ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏ã‡∏∑‡πâ‡∏≠: {diff:.1f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")

                                # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                                if diff <= 30 and not btn_prepared:
                                    btn_bounds = d(text=BTN_BUY).info.get('bounds', None)
                                    if btn_bounds:
                                        center_x = (btn_bounds['left'] + btn_bounds['right']) // 2
                                        center_y = (btn_bounds['top'] + btn_bounds['bottom']) // 2
                                        btn_prepared = True
                                        print(f"‚è≥ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏•‡∏¥‡∏Å (‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ {diff:.1f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ): {center_x}, {center_y}")

                                if diff <= 0.5:
                                    break

                                # ‡∏õ‡∏±‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏•‡πá‡∏≠‡∏Å
                                if (now - last_print_time).total_seconds() >= 5 and diff > 10:
                                    y_swipe = height * 0.45
                                    d.swipe(20, y_swipe, 20, y_swipe + 70, 0.1)
                                    last_print_time = now
                                    print("üîÑ ‡∏õ‡∏±‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡πá‡∏≠‡∏Å")

                                time.sleep(0.2 if diff <= 2 else 1)

                            # ‡∏£‡∏≠‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                            while get_adjusted_time() < buy_time:
                                time.sleep(0.001)

                            print(f"üü¢ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤: {get_adjusted_time()}")
                            d.click(center_x, center_y)
                            buy_clicked = True
                            print(f"‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤: {get_adjusted_time()}")

                        else:
                            print("‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß")
                            d.click(center_x, center_y)
                            buy_clicked = True
                            print(f"üïí ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏ß‡∏•‡∏≤: {get_adjusted_time()}")

                # ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà PIN ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡πâ‡∏ß
                elif buy_clicked and not pin_clicked:
                    if not d(text=PIN_TEXT_TRIGGER).exists():
                        y = SWIPE_HEIGHT
                        start_x = width * SWIPE_WIDTH_RATIO
                        end_x = width - 10
                        d.swipe(start_x, y, end_x, y, 0.02)
                        on_swipe = True
                        print("üîÑ ‡∏õ‡∏±‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏° PIN")
                    else:
                        if enter_pin():
                            pin_clicked = True
                            print("‚úÖ ‡πÉ‡∏™‡πà PIN ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                else:
                    if d(text=PIN_TEXT_TRIGGER).exists():
                        enter_pin()

            except Exception as e:
                print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠/PIN: {e}")

            time.sleep(0.1)

    except Exception as e:
        print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡πÉ‡∏ô click_buy_and_pin: {e}")

def main():
    global running, width, height
    send_script_loaded()
    print(f"üîå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: {DEVICE_ID}")
    try:
        d = u2.connect(DEVICE_ID)  # ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
        # d = u2.connect()  # ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {e}")
        send_error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {e}" )
        return

    do_hook(d)

    if init_ntp_sync() and wait_until():
        running = True
        print("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ...")

        d.app_start(TARGET_APP)
        
        # ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
        width, height = d.window_size()
        print(f"üì± ‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠: {width}x{height}")

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏° threads
        threads = [
            threading.Thread(target=click_L6, args=(d,), name="Thread-ClickL6"),
            threading.Thread(target=click_ok, args=(d,), name="Thread-ClickOK"),
            threading.Thread(target=click_close, args=(d,), name="Thread-ClickClose"),
            threading.Thread(target=click_buy_and_pin, args=(d, buy_time, width, height), name="Thread-BuyAndPin"),
            threading.Thread(target=complete, args=(d,), name="Thread-Complete")
        ]

        for thread in threads:
            thread.daemon = True
            thread.start()

        while running:
            time.sleep(0.1)

if __name__ == "__main__":
    main()